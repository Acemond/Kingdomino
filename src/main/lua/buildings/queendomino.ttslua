local buildingZones = { "b6d71a", "3b40dd", "51e2bf", "58ae27", "091f68", "372846" }
local leftBuildingsBoardGuid = "a066dc"
local rightBuildingsBoardGuid = "a77d62"
local tableGuid = "0f8757"

local deck_guid = "04de04"
local dragon_guid = "447c40"
local dragon_cave_position = { -8.29, 1.22, 11.54 }
local deck_position = { -5.87, 1.21, 11.51 }

function dealBuildings()
  sendDragonBack()
  local zones = {}
  for _, zoneGuid in pairs(buildingZones) do
    table.insert(zones, getObjectFromGUID(zoneGuid))
  end

  for i = 1, #zones, 1 do
    if not buildingPresent(zones[i]) then
      local sourceIndex = getNextDealtBuilding(zones, i, #zones)
      if not sourceIndex then
        dealBuilding(zones[i])
      else
        moveBuilding(zones[sourceIndex], zones[i])
      end
    end
  end
end

function sendDragonBack()
  getObjectFromGUID(dragon_guid).setPositionSmooth(dragon_cave_position)
  getObjectFromGUID(dragon_guid).setRotationSmooth({ 0, 0, 0 })
end

function buildingPresent(zone)
  local count = 0
  for _, obj in pairs(zone.getObjects()) do
    if not obj.isSmoothMoving() then
      count = count + 1
    end
  end
  return count > 2
end

function getNextDealtBuilding(zones, cursor, max)
  if buildingPresent(zones[cursor]) then
    return cursor
  elseif cursor == max then
    return false
  else
    return getNextDealtBuilding(zones, cursor + 1, max)
  end
end

function moveBuilding(sourceZone, destinationZone)
  for _, obj in ipairs(sourceZone.getObjects()) do
    if obj.guid ~= leftBuildingsBoardGuid and obj.guid ~= rightBuildingsBoardGuid and obj.guid ~= tableGuid then
      obj.setPositionSmooth(destinationZone.getPosition(), false)
    end
  end
end

function dealBuilding(zone)
  local deck = getObjectFromGUID(deck_guid)
  if deck ~= nil then
    deck.takeObject({ position = zone.getPosition() })
  end
end

function placeDeck()
  local deck = getObjectFromGUID(deck_guid)
  deck.setPositionSmooth(deck_position)
  deck.shuffle()
end
