require("constants/guids")

local kingTargetPositions = {
  { 0.00, 1.92, 6 },
  { 0.00, 1.92, 4 },
  { 0.00, 1.92, 2 },
  { 0.00, 1.92, 0 },
  { 0.00, 1.92, -2 },
  { 0.00, 1.92, -4 }
}

function placeKings(game_settings)
  destroyNonPlayingKings(game_settings)
  takeKings(game_settings)
end

function takeKings(game_settings)
  self.shuffle()

  if game_settings.player_count == 2 then
    math.randomseed(os.time())
    local firstPlayerIndex = math.random(2)
    local colors = getSeatedPlayers(game_settings.seated_players)
    local firstPlayer = Guids.player_pieces[colors[firstPlayerIndex]]
    local otherPlayer = Guids.player_pieces[colors[3 - firstPlayerIndex]]

    self.takeObject({ guid = firstPlayer.kings[1], position = kingTargetPositions[1], rotation = { 0, 180, 0 } })
    self.takeObject({ guid = otherPlayer.kings[1], position = kingTargetPositions[2], rotation = { 0, 180, 0 } })
    self.takeObject({ guid = otherPlayer.kings[2], position = kingTargetPositions[3], rotation = { 0, 180, 0 } })
    self.takeObject({ guid = firstPlayer.kings[2], position = kingTargetPositions[4], rotation = { 0, 180, 0 } })
  else
    for i = 1, game_settings.player_count, 1 do
      self.takeObject({ position = kingTargetPositions[i], rotation = { 0, 180, 0 } })
    end
  end

  self.destroy()
end

function getSeatedPlayers(seated_players)
  local colors = {}
  for color, is_seated in pairs(seated_players) do
    if is_seated then
      table.insert(colors, color)
    end
  end
  return colors
end

function destroyNonPlayingKings(game_settings)
  for color, playing in pairs(game_settings.seated_players) do
    if not playing then
      destroyObjectInBag(self, Guids.player_pieces[color].kings[1])
      destroyObjectInBag(self, Guids.player_pieces[color].kings[2])
      getObjectFromGUID(Guids.player_pieces[color].castle).destroy()
      getObjectFromGUID(Guids.player_pieces[color].castle_tile).destroy()
    elseif game_settings.player_count > 2 then
      destroyObjectInBag(self, Guids.player_pieces[color].kings[1])
    end
  end
end

function destroyObjectInBag(bag, guid)
  bag.takeObject({
    guid = guid,
    smooth = false,
    callback_function = function(obj)
      obj.destroy()
    end
  })
end