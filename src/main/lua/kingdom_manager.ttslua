require("util/table")
require("util/domino")
require("constants/guids")
require("constants/players")

local kingdom_guids = Guids.player_pieces[color]

local kingdom_size = 5

local table_guid = "0f8757"

local move_buttons_activated = false
local blocked_directions = {
  left = false,
  right = false,
  up = false,
  down = false
}
local blocked_direction_buttons = {
  left = false,
  right = false,
  up = false,
  down = false
}

local current_position = {
  x = 0,
  z = 0
}
local locked_kingdom = false
local button_state_locked = true

local visible_y_position = 1.05
local hidden_y_position = 0.5

local move_animation

local directions = {
  left = "left",
  right = "right",
  up = "up",
  down = "down"
}

function onLoad(save_state)
  if save_state ~= "" then
    local save = JSON.decode(save_state)
    kingdom_size = save.kingdom_size
    current_position = save.current_position
    locked_kingdom = save.locked_kingdom
    button_state_locked = save.button_state_locked
    blocked_directions = save.blocked_directions
    blocked_direction_buttons = save.blocked_direction_buttons
    move_buttons_activated = save.move_buttons_activated
  end
  createLockButtons()
  createUnlockButtons()
  createMoveButtons()
end

function onSave()
  return JSON.encode({
    kingdom_size = kingdom_size,
    current_position = current_position,
    locked_kingdom = locked_kingdom,
    button_state_locked = not locked_kingdom, -- forces update of buttons on load
    blocked_directions = blocked_directions,
    move_buttons_activated = move_buttons_activated,
    blocked_direction_buttons = { -- forces update of buttons on load
      left = not blocked_directions.left,
      right = not blocked_directions.right,
      up = not blocked_directions.up,
      down = not blocked_directions.down
    }
  })
end

local frame = table.indexOf(PlayerConstants.playable_color, color) * 2
function onUpdate()
  if Global.get("game") then
    if locked_kingdom ~= button_state_locked then
      updateLockButtons()
    end
    if not table.equal(blocked_direction_buttons, blocked_directions) then
      updateMoveButtons()
    end
  end
  if not Global.getVar("kingdom_size") then
    return
  end

  frame = frame + 1
  if frame % 15 ~= 0 then
    return
  else
    frame = 0
  end

  local held_dominoes, objects_to_move = getKingdomObjects()
  local kingdom_boundaries = getKingdomBoundaries(objects_to_move)

  if move_buttons_activated then
    updateBlockedDirections(kingdom_boundaries)
  end

  kingdom_size = Global.getVar("kingdom_size")

  local tile = getObjectFromGUID(kingdom_guids.castle_tile)
  if not locked_kingdom and not tile.isSmoothMoving() then
    local shift = { x = 0, z = 0 }
    for _, domino in pairs(held_dominoes) do
      shift.x = getAutoShiftKingdomValue(kingdom_boundaries, domino, "x")
      shift.z = getAutoShiftKingdomValue(kingdom_boundaries, domino, "z")
    end

    current_position = {
      x = current_position.x + shift.x,
      z = current_position.z + shift.z,
    }
    if not table.equal(shift, { x = 0, z = 0 }) then
      launchAnimation(objects_to_move, current_position)
    end
  end
end

function getAutoShiftKingdomValue(kingdom_boundaries, domino, axis)
  local zone = getObjectFromGUID(kingdom_guids.kingdom_zone)
  local domino_local_position = zone.positionToLocal(domino.getPosition())

  if domino_local_position[axis] > (1 / zone.getScale()[axis]) * (kingdom_size - 1) then
    return getPossibleShift(kingdom_boundaries[axis].min, kingdom_boundaries[axis].max, -getDominoSize(domino, axis))
  elseif domino_local_position[axis] < -(1 / zone.getScale()[axis]) * (kingdom_size - 1) then
    return getPossibleShift(kingdom_boundaries[axis].min, kingdom_boundaries[axis].max, getDominoSize(domino, axis))
  else
    return 0
  end
end

function tryShift(direction)
  local shift = { x = 0, z = 0 }
  local _, kingdom_objects = getKingdomObjects()
  if direction == directions.left then
    local min_kingdom, max_kingdom = getMinPos(kingdom_objects, "x"), getMaxPos(kingdom_objects, "x")
    shift.x = getSingleShift(min_kingdom, max_kingdom, -1)
    if getSingleShift(min_kingdom, max_kingdom, -2) == 0 then
      blocked_directions[direction] = true
    end
  elseif direction == directions.right then
    local min_kingdom, max_kingdom = getMinPos(kingdom_objects, "x"), getMaxPos(kingdom_objects, "x")
    shift.x = getSingleShift(min_kingdom, max_kingdom, 1)
    if getSingleShift(min_kingdom, max_kingdom, 2) == 0 then
      blocked_directions[direction] = true
    end
  elseif direction == directions.up then
    local min_kingdom, max_kingdom = getMinPos(kingdom_objects, "z"), getMaxPos(kingdom_objects, "z")
    shift.z = getSingleShift(min_kingdom, max_kingdom, 1)
    if getSingleShift(min_kingdom, max_kingdom, 2) == 0 then
      blocked_directions[direction] = true
    end
  elseif direction == directions.down then
    local min_kingdom, max_kingdom = getMinPos(kingdom_objects, "z"), getMaxPos(kingdom_objects, "z")
    shift.z = getSingleShift(min_kingdom, max_kingdom, -1)
    if getSingleShift(min_kingdom, max_kingdom, -1) == 0 then
      blocked_directions[direction] = true
    end
  end

  current_position = {
    x = current_position.x + shift.x,
    z = current_position.z + shift.z,
  }
  if not table.equal(shift, { x = 0, z = 0 }) then
    launchAnimation(kingdom_objects, current_position)
  end
end

function updateBlockedDirections(kingdom_boundaries)
  blocked_directions = {
    left = false,
    right = false,
    up = false,
    down = false
  }
  if getSingleShift(kingdom_boundaries.x.min, kingdom_boundaries.x.max, -1) == 0 then
    blocked_directions.left = true
  end
  if getSingleShift(kingdom_boundaries.x.min, kingdom_boundaries.x.max, 1) == 0 then
    blocked_directions.right = true
  end
  if getSingleShift(kingdom_boundaries.z.min, kingdom_boundaries.z.max, -1) == 0 then
    blocked_directions.down = true
  end
  if getSingleShift(kingdom_boundaries.z.min, kingdom_boundaries.z.max, 1) == 0 then
    blocked_directions.up = true
  end
end

function updateMoveButtons()
  for direction, blocked in pairs(blocked_directions) do
    if blocked_direction_buttons[direction] ~= blocked then
      blocked_direction_buttons[direction] = blocked
      if blocked then
        disableButton(getObjectFromGUID(Guids.player_pieces[color][direction]))
      else
        enableButton(getObjectFromGUID(Guids.player_pieces[color][direction]))
      end
    end
  end
end

function getKingdomObjects()
  local zone = getObjectFromGUID(kingdom_guids.kingdom_zone)
  local held_objects_guid = getHeldObjectsGuid()
  local held_dominoes, kingdom_objects = {}, {}
  for _, object in pairs(zone.getObjects()) do
    if object.guid ~= table_guid then
      if table.contains(held_objects_guid, object.guid) then
        if DominoUtils.isDomino(object) then
          table.insert(held_dominoes, object)
        end
      else
        table.insert(kingdom_objects, object)
      end
    end
  end
  return held_dominoes, kingdom_objects
end

function getSingleShift(min_kingdom, max_kingdom, space_needed)
  local kingdom_limit = (kingdom_size - 1) / 2
  if space_needed < 0 then
    if math.abs(-kingdom_limit - min_kingdom) >= math.abs(space_needed) then
      return space_needed
    else
      return 0
    end
  else
    if kingdom_limit - max_kingdom >= space_needed then
      return space_needed
    else
      return 0
    end
  end
end

function getPossibleShift(min_kingdom, max_kingdom, space_needed)
  local kingdom_limit = (kingdom_size - 1) / 2
  if space_needed < 0 then
    local shift = space_needed + kingdom_limit - max_kingdom
    if kingdom_limit - max_kingdom < math.abs(space_needed)
        and math.abs(-kingdom_limit - min_kingdom) >= math.abs(shift) then
      return shift
    end

    if space_needed + 1 < 0 then
      return getPossibleShift(min_kingdom, max_kingdom, space_needed + 1)
    else
      return 0
    end
  else
    local shift = space_needed - math.abs(-kingdom_limit - min_kingdom)
    if math.abs(-kingdom_limit - min_kingdom) < space_needed
        and kingdom_limit - max_kingdom >= shift then
      return shift
    end

    if space_needed - 1 > 0 then
      return getPossibleShift(min_kingdom, max_kingdom, space_needed - 1)
    else
      return 0
    end
  end
end

function launchAnimation(objects, new_position)
  moveKingdom(objects, new_position)
end

function getKingdomBoundaries(objects)
  return {
    x = {
      min = getMinPos(objects, "x"),
      max = getMaxPos(objects, "x")
    },
    z = {
      min = getMinPos(objects, "z"),
      max = getMaxPos(objects, "z")
    }
  }
end

function getKingdomBoundaries(objects)
  return {
    x = {
      min = getMinPos(objects, "x"),
      max = getMaxPos(objects, "x")
    },
    z = {
      min = getMinPos(objects, "z"),
      max = getMaxPos(objects, "z")
    }
  }
end

function getMaxPos(objects, axis)
  local zone = getObjectFromGUID(kingdom_guids.kingdom_zone)

  local max
  for _, object in pairs(objects) do
    local local_position = math.floor(zone.positionToLocal(object.getPosition())[axis] * zone.getScale().x + 0.5) / 2
    if DominoUtils.isDomino(object) then
      local orientation = DominoUtils.getOrientation(object.getRotation().y - zone.getRotation().y)
      local_position = local_position + getDominoMaxOffset(orientation)[axis]
    end

    if max == nil or local_position > max then
      max = local_position
    end
  end
  if max == nil then
    return 0
  else
    return max
  end
end

function getMinPos(objects, axis)
  local zone = getObjectFromGUID(kingdom_guids.kingdom_zone)

  local min
  for _, object in pairs(objects) do
    local local_position = math.floor(zone.positionToLocal(object.getPosition())[axis] * zone.getScale().x + 0.5) / 2
    if DominoUtils.isDomino(object) then
      local orientation = DominoUtils.getOrientation(object.getRotation().y - zone.getRotation().y)
      local_position = local_position + getDominoMinOffset(orientation)[axis]
    end

    if min == nil or local_position < min then
      min = local_position
    end
  end
  if min == nil then
    return 0
  else
    return min
  end
end

function getDominoMaxOffset(orientation)
  if orientation == DominoUtils.orientations.x or orientation == DominoUtils.orientations.x_reverse then
    return { x = 0.5, y = 0, z = 0 }
  else
    return { x = 0, y = 0, z = 0.5 }
  end
end

function getDominoSize(domino, axis)
  local rotation_y = domino.getRotation().y
  if (rotation_y > -45 and rotation_y < 45) or (rotation_y > 135 and rotation_y < 225) or (rotation_y > 315) then
    if axis == "x" then
      return 2
    else
      return 1
    end
  else
    if axis == "x" then
      return 1
    else
      return 2
    end
  end
end

function getDominoMinOffset(orientation)
  if orientation == DominoUtils.orientations.x or orientation == DominoUtils.orientations.x_reverse then
    return { x = -0.5, y = 0, z = 0 }
  else
    return { x = 0, y = 0, z = -0.5 }
  end
end

function getHeldObjectsGuid()
  local all_objects = {}
  for _, player in pairs(Player.getPlayers()) do
    if player.getHoldingObjects() ~= nil then
      for _, object in pairs(player.getHoldingObjects()) do
        table.insert(all_objects, object.guid)
      end
    end
  end
  return all_objects
end

function moveKingdom(kingdom_objects, new_position)
  local zone = getObjectFromGUID(kingdom_guids.kingdom_zone)
  local tile = getObjectFromGUID(kingdom_guids.castle_tile)

  local tile_local_pos = zone.positionToLocal(tile.getPosition())

  local target_local_position = {
    x = new_position.x * 2 / zone.getScale().x,
    y = tile_local_pos.y,
    z = new_position.z * 2 / zone.getScale().z
  }

  for _, object in pairs(kingdom_objects) do
    local object_local_position = zone.positionToLocal(object.getPosition())
    local object_target_position = {
      target_local_position.x + (object_local_position.x - tile_local_pos.x),
      object_local_position.y,
      target_local_position.z + (object_local_position.z - tile_local_pos.z),
    }
    object.setPositionSmooth(zone.positionToWorld(object_target_position), false, true)
  end

  local target_position = zone.positionToWorld(target_local_position)
  move_animation = Wait.condition(function()
    move_animation = nil
  end, function()
    return math.abs(target_position.x - tile.getPosition().x) < 0.01
        and math.abs(target_position.z - tile.getPosition().z) < 0.01
  end, 360, function()
    move_animation = nil
  end)
end

function toggleLock()
  locked_kingdom = not locked_kingdom
end

function lockKingdom()
  locked_kingdom = true
end

function unlockKingdom()
  locked_kingdom = false
end

function createLockButtons()
  getObjectFromGUID(Guids.player_pieces[color].lock_kingdom).createButton({
    click_function = "lockKingdom",
    function_owner = self,
    tooltip = "Click to prevent the kingdom from moving away from the edges.",
    position = { 0, 0.05, 0 },
    scale = { 0, 0, 0 },
    color = { 0, 0, 0, 0 },
    width = 800,
    height = 600,
  })
end

function createUnlockButtons()
  getObjectFromGUID(Guids.player_pieces[color].unlock_kingdom).createButton({
    click_function = "unlockKingdom",
    function_owner = self,
    tooltip = "Click for kingdom to move away from the edges.",
    position = { 0, 0.05, 0 },
    scale = { 0, 0, 0 },
    color = { 0, 0, 0, 0 },
    width = 800,
    height = 600,
  })
end

function updateLockButtons()
  local unlock_button = getObjectFromGUID(Guids.player_pieces[color].unlock_kingdom)
  local lock_button = getObjectFromGUID(Guids.player_pieces[color].lock_kingdom)

  local kingdom = getObjectFromGUID(Guids.player_pieces[color].kingdom_zone)
  local x_offset = -kingdom_size / kingdom.getScale().x
  local z_offset = -2 * (kingdom_size / 2 + 1) / kingdom.getScale().z

  if locked_kingdom then
    button_state_locked = true
    hideButton(lock_button, x_offset, z_offset)
    Wait.condition(function()
      showButton(unlock_button, x_offset, z_offset)
    end, function()
      return lock_button.getPosition().y < 0.9
    end)
  else
    button_state_locked = false
    hideButton(unlock_button, x_offset, z_offset)
    Wait.condition(function()
      showButton(lock_button, x_offset, z_offset)
    end, function()
      return unlock_button.getPosition().y < 0.9
    end)
  end
end

function createMoveButtons()
  local left_button = getObjectFromGUID(Guids.player_pieces[color].left)
  local right_button = getObjectFromGUID(Guids.player_pieces[color].right)
  local up_button = getObjectFromGUID(Guids.player_pieces[color].up)
  local down_button = getObjectFromGUID(Guids.player_pieces[color].down)

  createMoveButton(left_button, directions.left)
  createMoveButton(right_button, directions.right)
  createMoveButton(up_button, directions.up)
  createMoveButton(down_button, directions.down)
end

function activateMoveButtons()
  move_buttons_activated = true
  local left_button = getObjectFromGUID(Guids.player_pieces[color].left)
  local right_button = getObjectFromGUID(Guids.player_pieces[color].right)
  local up_button = getObjectFromGUID(Guids.player_pieces[color].up)
  local down_button = getObjectFromGUID(Guids.player_pieces[color].down)

  local kingdom = getObjectFromGUID(Guids.player_pieces[color].kingdom_zone)
  local offset_value = (kingdom_size + 1.5) / kingdom.getScale().x

  showButton(left_button, -offset_value, 0)
  showButton(right_button, offset_value, 0)
  showButton(up_button, 0, offset_value)
  showButton(down_button, 0, -offset_value)
end

function createMoveButton(button, direction)
  local function_name = "move_kingdom_" .. direction
  self.setVar(function_name, function()
    toggleEffect(direction)
    tryShift(direction)
  end)
  button.createButton({
    click_function = function_name,
    function_owner = self,
    tooltip = "Click to move kingdom " .. direction .. ".",
    position = { 0, 0.05, 0 },
    scale = { 0, 0, 0 },
    color = { 0, 0, 0, 0 },
    width = 800,
    height = 600,
  })
end

function toggleEffect(direction)
  local button = getObjectFromGUID(Guids.player_pieces[color][direction])
  button.setPositionSmooth({ button.getPosition().x, 0.86, button.getPosition().z, }, false, true)
  Wait.condition(function()
    if not blocked_directions[direction] and not blocked_direction_buttons[direction] then
      button.setPositionSmooth({ button.getPosition().x, visible_y_position, button.getPosition().z, }, false, true)
    end
  end, function()
    return move_animation == nil
  end)
end

function showButton(button, x_offset, z_offset)
  local kingdom = getObjectFromGUID(Guids.player_pieces[color].kingdom_zone)
  local button_position = kingdom.positionToWorld({ x_offset, 0, z_offset })
  button.editButton({ index = 0, scale = { 1, 1, 1 } })
  button.setPosition({ button_position.x, 0.86, button_position.z, })
  button.setPositionSmooth({ button_position.x, visible_y_position, button_position.z, }, false, true)
end

function hideButton(button, x_offset, z_offset)
  local kingdom = getObjectFromGUID(Guids.player_pieces[color].kingdom_zone)
  local button_position = kingdom.positionToWorld({ x_offset, 0, z_offset })
  button.editButton({ index = 0, scale = { 0, 0, 0 } })
  button.setPositionSmooth({ button_position.x, hidden_y_position, button_position.z, }, false, true)
end

function disableButton(button)
  button.editButton({ index = 0, scale = { 0, 0, 0 } })
  button.setPositionSmooth({ button.getPosition().x, 0.86, button.getPosition().z, }, false, true)
end

function enableButton(button)
  button.editButton({ index = 0, scale = { 1, 1, 1 } })
  button.setPositionSmooth({ button.getPosition().x, visible_y_position, button.getPosition().z, }, false, true)
end
