require("constants/domino_board")

local left_control_zone_guid = "38ed1c"
local right_control_zone_guid = "358f4e"

local board_visible_y_position = 1.06
local board_hidden_y_position = 0.8

local zone_coordinates_modifiers = {
  [3] = { zPos = 4.4, zScale = 8.25 },
  [4] = { zPos = 3.22, zScale = 10.5 },
  [5] = { zPos = 1.96, zScale = 13.5 },
  [8] = { zPos = -1.66, zScale = 20 }
}

local current_board_size = 4

function onLoad(save_state)
  if save_state ~= "" then
    current_board_size = JSON.decode(save_state).board_size
  end
  Global.setVar("board_size", current_board_size)
end

function onSave()
  return JSON.encode({ board_size = current_board_size })
end

function onUpdate()
  if not Global.get("game") then
    local new_board_size = getBoardSize()
    if current_board_size ~= new_board_size then
      current_board_size = new_board_size
      updateTileBoards(current_board_size)
      Global.setVar("board_size", current_board_size)
    end
  end
end

function updateTileBoards(board_size)
  setBoardYPosition(board_size, board_visible_y_position)
  enableBoardSnapPoints(board_size)

  for size, _ in pairs(DominoBoardConstants.right_boards) do
    if size ~= board_size then
      setBoardYPosition(size, board_hidden_y_position)
      disableBoardSnapPoints(size)
    end
  end
  resizeControlZones(board_size)
end

function enableBoardSnapPoints(board_size)
  local snap_points = {}
  for _, z in pairs(DominoBoardConstants.snap_points_z_positions[board_size]) do
    table.insert(snap_points, {
      position = { 0, 0.1, z },
      rotation = { 0, 0, 0 },
      rotation_snap = true
    })
  end
  getObjectFromGUID(DominoBoardConstants.right_boards[board_size].guid).setSnapPoints(snap_points)
  getObjectFromGUID(DominoBoardConstants.left_boards[board_size].guid).setSnapPoints(snap_points)
end

function disableBoardSnapPoints(board_size)
  getObjectFromGUID(DominoBoardConstants.right_boards[board_size].guid).setSnapPoints({})
  getObjectFromGUID(DominoBoardConstants.left_boards[board_size].guid).setSnapPoints({})
end

function setBoardYPosition(board_size, y_position)
  local leftBoard = getObjectFromGUID(DominoBoardConstants.left_boards[board_size].guid)
  local rightBoard = getObjectFromGUID(DominoBoardConstants.right_boards[board_size].guid)

  leftBoard.setPositionSmooth({ leftBoard.getPosition().x, y_position, leftBoard.getPosition().z }, false, true)
  rightBoard.setPositionSmooth({ rightBoard.getPosition().x, y_position, rightBoard.getPosition().z }, false, true)
end

function resizeControlZones(slots)
  resizeControlZone(getObjectFromGUID(right_control_zone_guid), slots)
  resizeControlZone(getObjectFromGUID(left_control_zone_guid), slots)
end

function resizeControlZone(zone, slots)
  zone.setScale({ zone.getScale().x, zone.getScale().y, zone_coordinates_modifiers[slots].zScale })
  zone.setPosition({ zone.getPosition().x, zone.getPosition().y, zone_coordinates_modifiers[slots].zPos })
end

function getBoardSize()
  local player_count = Global.getVar("player_count")
  local decks = Global.getTable("deck_enabled")
  local variants = Global.getTable("variant_enabled")

  local size = 4
  if player_count == 3
      and not decks.queendomino
      and not variants.three_players_variant then
    size = 3
  elseif decks.queendomino and decks.kingdomino
      and (player_count == 5 or player_count == 6) then
    size = 8
  end

  if decks.age_of_giants then
    size = size + 1
  end

  -- FIXME: Quickfix until other board sizes gets added
  if size ~= 3 and size ~= 4 and size ~= 5 and size ~= 8 then
    return 4
  end

  return size
end
