require("constants/guids")

local castle_positions = {
  White = {
    position = { x = -21.01, y = 0.95, z = -17.00 },
    yaw = 0
  },
  Orange = {
    position = { x = 20.95, y = 0.95, z = -17.00 },
    yaw = 0
  },
  Purple = {
    position = { x = -21.01, y = 0.95, z = 23.00 },
    yaw = 180
  },
  Red = {
    position = { x = 20.95, y = 0.95, z = 23.00 },
    yaw = 180
  },
  Green = {
    position = { x = -31.00, y = 0.95, z = 3.00 },
    yaw = 90
  },
  Pink = {
    position = { x = 30.94, y = 0.95, z = 3.00 },
    yaw = 270
  }
}

local kingdom_zone_scales = { [5] = 10, [7] = 14 }

local castle_y_position = 1.16
local walls_y_position = 0.95
local hidden_y_position = -0.8

local castle_animations = {}
local walls_animations = {
  Orange = {},
  Purple = {},
  Red = {},
  White = {},
  Green = {},
  Pink = {}
}
local colors = { "Orange", "Purple", "Red", "White", "Green", "Pink" }
local wall_sizes = { 5, 7 }

local visible_walls = {
  Orange = false,
  Purple = false,
  Red = false,
  White = false,
  Green = false,
  Pink = false
}
local current_walls_size
function onUpdate()
  if not Global.get("game") then
    local new_walls_size = getWallsSize()
    if new_walls_size ~= current_walls_size then
      current_walls_size = new_walls_size
      updateKingdomZones()
      updateWalls()
    end
  end
end

function onLoad(save_state)
  if save_state ~= "" then
    visible_walls = JSON.decode(save_state).visible_walls
    current_walls_size = JSON.decode(save_state).current_walls_size
  else
    current_walls_size = 5
  end
  -- FIXME: waiting frame after another for Global var set cascade...
  -- ... ugh
  Wait.frames(function ()
    getWallsSize()
  end, 1)
end

function onSave()
  return JSON.encode({
    visible_walls = visible_walls,
    current_walls_size = current_walls_size
  })
end

function updateWalls()
  for color, visible in pairs(visible_walls) do
    if visible then
      showWalls(color, 20)
    else
      hideWalls(color, current_walls_size)
    end
  end

  for _, color in ipairs(colors) do
    for _, size in ipairs(wall_sizes) do
      if size ~= current_walls_size then
        hideWalls(color, size)
      end
    end
  end
end

function onPlayerChangeColor(player_color)
  if castle_positions[player_color] and not Global.getVar("quick_setup") then
    Player[player_color].lookAt({
      position = castle_positions[player_color].position,
      pitch = 45,
      yaw = castle_positions[player_color].yaw,
      distance = 30,
    })
  end
end

function showCastle(seat_color)
  local castle_position = {
    castle_positions[seat_color].position.x,
    castle_y_position,
    castle_positions[seat_color].position.z
  }
  animateCastle(seat_color, castle_position, 25)
  visible_walls[seat_color] = true
  updateWalls()
end

function hideCastle(seat_color)
  local hidden_position = {
    castle_positions[seat_color].position.x,
    hidden_y_position,
    castle_positions[seat_color].position.z
  }

  animateCastle(seat_color, hidden_position, 0)
  visible_walls[seat_color] = false
  updateWalls()
end

function moveCastle(parameters)
  animateCastle(parameters.seat_color, parameters.position)
  local walls_position = {
    parameters.position[1],
    walls_y_position,
    parameters.position[3]
  }
  animateWalls(parameters.seat_color, walls_position, current_walls_size)
end

function showWalls(seat_color, delay)
  local walls_position = {
    castle_positions[seat_color].position.x,
    walls_y_position,
    castle_positions[seat_color].position.z
  }

  Wait.frames(function()
    local kingdom_zone = getObjectFromGUID(Guids.player_pieces[seat_color].kingdom_zone)
    local hand_offset = (current_walls_size + 2) / kingdom_zone.getScale().x
    local hand_transform = Player[seat_color].getHandTransform()
    hand_transform.position.x = kingdom_zone.positionToWorld({ 0, 0, -hand_offset }).x
    hand_transform.position.z = kingdom_zone.positionToWorld({ 0, 0, -hand_offset }).z
    Player[seat_color].setHandTransform(hand_transform)
  end, delay)

  animateWalls(seat_color, walls_position, current_walls_size, delay)
end

function hideWalls(seat_color, size)
  local walls_position = {
    castle_positions[seat_color].position.x,
    hidden_y_position,
    castle_positions[seat_color].position.z
  }
  animateWalls(seat_color, walls_position, size, 0)
end

function animateCastle(seat_color, new_position, delay)
  if castle_animations[seat_color] ~= nil then
    Wait.stop(castle_animations[seat_color])
    castle_animations[seat_color] = nil
  end

  local animation_function = function()
    local castle = getObjectFromGUID(Guids.player_pieces[seat_color].castle)

    castle.lock()
    castle.setPositionSmooth(new_position)
    castle_animations[seat_color] = nil
  end

  if delay == nil or delay == 0 then
    animation_function()
  else
    castle_animations[seat_color] = Wait.frames(animation_function, delay)
  end
end

function animateWalls(seat_color, new_position, size, delay)
  if walls_animations[seat_color][size] ~= nil then
    Wait.stop(walls_animations[seat_color][size])
    walls_animations[seat_color][size] = nil
  end

  local animation_function = function()
    local walls = getObjectFromGUID(Guids.walls_guids[size][seat_color])

    walls.setPositionSmooth(new_position)
    walls_animations[seat_color][size] = nil
  end

  if delay == nil or delay == 0 then
    animation_function()
  else
    walls_animations[seat_color][size] = Wait.frames(animation_function, delay)
  end
end

function updateKingdomZones()
  for _, guids in pairs(Guids.player_pieces) do
    local zone = getObjectFromGUID(guids.kingdom_zone)
    zone.setScale({
      kingdom_zone_scales[current_walls_size],
      zone.getScale().y,
      kingdom_zone_scales[current_walls_size]
    })
  end
end

function getWallsSize()
  local player_count, decks, variants
  local game = Global.get("game")
  if game and game.settings then
    decks = game.settings.decks
    variants = game.settings.variants
    player_count = game.settings.player_count
  else
    player_count = Global.getVar("player_count")
    decks = Global.getTable("deck_enabled")
    variants = Global.getTable("variant_enabled")
  end

  local size = 5
  if decks.queendomino then
    if decks.kingdomino then
      if player_count < 5 then
        size = 7
      end
    else
      if player_count < 3 then
        size = 7
      end
    end
  elseif variants.kingdomino_xl or variants.two_players_advanced then
    size = 7
  end

  Global.setVar("kingdom_size", size)
  return size
end
