require("constants/guids")
require("constants/players")
require("util/table")

local seated_players = {
  White = false,
  Orange = false,
  Purple = false,
  Red = false,
  Green = false,
  Pink = false
}
local local_players_button_guid = {
  enable = "4f044d",
  disable = "d1e47c"
}

local game_master_color = "Black"
local spectator_color = "Grey"

local local_players_enabled = false  -- Set this with setLocalPlayersEnabled only

local castle_manager_guid = "9bb39a"
local castle_manager = {}

function onLoad(save_state)
  castle_manager = getObjectFromGUID(castle_manager_guid)

  initialize(save_state)
  Player.getPlayers()[1].lookAt({
    position = { x = 0, y = 0, z = -28 },
    pitch = 55,
    yaw = 0,
    distance = 30,
  })
  seatColoredPlayer()
end

function initialize(save_state)
  if save_state ~= "" then
    seated_players = JSON.decode(save_state).seated_players
    local_players_enabled = JSON.decode(save_state).local_players_enabled
  end

  updateSeatedPlayers()
  setLocalPlayersEnabled(local_players_enabled)
end

function updateSeatedPlayers()
  Global.setTable("seated_players", seated_players)
  Global.setVar("player_count", getPlayerCount())
end

function onSave()
  return JSON.encode({
    seated_players = seated_players,
    local_players_enabled = local_players_enabled,
  })
end

function onUpdate()
  updatePlayerButtons()
  updateLocalPlayerButton()
end

function setLocalPlayersEnabled(is_enabled)
  local_players_enabled = is_enabled
  if not local_players_enabled then
    removeAllLocalPlayers()
  end
end

function addLocalPlayer(seat_color)
  seated_players[seat_color] = true
  updateSeatedPlayers()
  castle_manager.call("showCastle", seat_color)
end

function addPlayer(parameters)
  doAddPlayer(parameters.player_color, parameters.seat_color)
end

function doAddPlayer(player_color, seat_color)
  seated_players[seat_color] = true
  if not local_players_enabled then
    if player_color == "Grey" then
      getNextSpectator().changeColor(seat_color)
    else
      Player[player_color].changeColor(seat_color)
    end
  end
  updateSeatedPlayers()
  castle_manager.call("showCastle", seat_color)
end

function getNextSpectator()
  for _, player in ipairs(Player.getPlayers()) do
    if player.color == "Grey" then
      return player
    end
  end
end

function removePlayer(seat_color)
  seated_players[seat_color] = false
  if not local_players_enabled then
    removePlayerColor(Player[seat_color])
  end
  updateSeatedPlayers()
  castle_manager.call("hideCastle", seat_color)
end

function removePlayerColor(player)
  local target_color = game_master_color
  if Player[game_master_color].seated then
    target_color = spectator_color
    if Player[player.color].seated then
      broadcastToColor("You are now a spectator, pick a color with the top right menu.", player.color, { r = 1, g = 0, b = 0 })
    end
  end
  player.changeColor(target_color)
end

function setPlayerCount(target_player_count)
  while getPlayerCount() < target_player_count do
    addNextPlayer()
  end
  while getPlayerCount() > target_player_count do
    removeNextPlayer()
  end
end

function addNextPlayer()
  for _, color in ipairs(PlayerConstants.playable_color) do
    if not seated_players[color] then
      local player = getPlayerNotSeated()
      if player ~= nil then
        doAddPlayer(player.color, color)
        return
      else
        setLocalPlayersEnabled(true)
        addLocalPlayer(color)
        return
      end
    end
  end
end

function removeNextPlayer()
  for i = #PlayerConstants.playable_color, 1, -1 do
    local color = PlayerConstants.playable_color[i]

    if seated_players[color] then
      removePlayer(color)
      return
    end
  end
end

function getPlayerNotSeated()
  for _, player in ipairs(Player.getPlayers()) do
    if not seated_players[player.color] then
      return player
    end
  end
end

function removeAllLocalPlayers()
  for color, enabled in pairs(seated_players) do
    if not Player[color].seated and enabled then
      removePlayer(color)
    end
  end
end

function onPlayerChangeColor(player_color)
  if not local_players_enabled and player_color ~= spectator_color and player_color ~= game_master_color
      and not seated_players[player_color] and Player[player_color].seated then
    doAddPlayer(player_color, player_color)
  end
  if not local_players_enabled then
    removeUnoccupiedSeats()
  end
end

function removeUnoccupiedSeats()
  for color, is_seated in pairs(seated_players) do
    if is_seated and not Player[color].seated then
      removePlayer(color)
    end
  end
end

function seatColoredPlayer()
  for _, player in pairs(Player.getPlayers()) do
    if not local_players_enabled and player.color ~= spectator_color and player.color ~= game_master_color then
      if table.contains(PlayerConstants.playable_color, player.color)
          and not seated_players[player.color]
          and player.seated then
        doAddPlayer(player.color, player.color)
      end
    end
  end
end

function getPlayerCount()
  local count = 0
  for _, seated in pairs(seated_players) do
    if seated then
      count = count + 1
    end
  end
  return count
end

function onPlayerConnect(person)
  if not local_players_enabled and not seated_players[person.color]
      and person.color ~= spectator_color and person.color ~= game_master_color then
    if table.contains(PlayerConstants.playable_color, person.color) then
      doAddPlayer(person.color, person.color)
    else
      removePlayerColor(person.color)
    end
  end
end

function onPlayerDisconnect(person)
  if not local_players_enabled and seated_players[person.color] and #Player.getPlayers() > 0 then
    removePlayer(person.color)
  end
end

function updatePlayerButtons()
  for color, seated in pairs(seated_players) do
    local add_button = getObjectFromGUID(Guids.player_pieces[color].add_player)
    local remove_button = getObjectFromGUID(Guids.player_pieces[color].remove_player)

    if seated and add_button ~= nil and add_button.getStateId() == 1 then
      add_button.setState(2)
    elseif not seated and remove_button ~= nil and remove_button.getStateId() == 2 then
      remove_button.setState(1)
    end
  end
end

function updateLocalPlayerButton()
  if local_players_enabled then
    local enable_button = getObjectFromGUID(local_players_button_guid.enable)
    if enable_button and enable_button.getStateId() == 1 then
      enable_button.setState(2)
    end
  else
    local disable_button = getObjectFromGUID(local_players_button_guid.disable)
    if disable_button and disable_button.getStateId() == 2 then
      disable_button.setState(1)
    end
  end
end
