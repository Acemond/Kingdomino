require("constants/guids")

local deck_button_visible = {
  kingdomino = true,
  queendomino = true,
  age_of_giants = true,
  the_court = true,
}
local deck_enabled = {
  kingdomino = true,
  queendomino = false,
  age_of_giants = false,
  the_court = false,
}
local deck_visible = {
  kingdomino = true,
  queendomino = false,
  age_of_giants = true,
  the_court = false,
}
local deck_buttons_guids = {
  enable = {
    queendomino = "69cbda",
    kingdomino = "9f4a39",
    age_of_giants = "df1760",
    the_court = "6ff70f"
  },
  disable = {
    queendomino = "d64709",
    kingdomino = "697d5b",
    age_of_giants = "6a25ff",
    the_court = "2c22ed"
  }
}

local deck_interaction = {
  age_of_giants = { dependency = "kingdomino", incompatibility = nil },
}

function onUpdate()
  checkInteractions()
  updateDeckVisible()
  updateButtonsState()
end

function onLoad(save_state)
  if save_state ~= "" then
    loadSaveState(save_state)
  end
  Global.setTable("deck_enabled", deck_enabled)
end

function loadSaveState(save_state)
  deck_button_visible = JSON.decode(save_state).deck_button_visible
  deck_enabled = JSON.decode(save_state).deck_enabled
  deck_visible = JSON.decode(save_state).deck_visible
end

function onSave()
  return JSON.encode({
    deck_button_visible = deck_button_visible,
    deck_enabled = deck_enabled,
    deck_visible = deck_visible
  })
end

function setDeckEnabled(parameters)
  deck_enabled[parameters.deck_name] = parameters.is_enabled
  Global.setTable("deck_enabled", deck_enabled)
end

function checkInteractions()
  for deck_name, interaction in pairs(deck_interaction) do
    if not deck_button_visible[deck_name] and checkDependency(interaction) and checkIncompatibility(interaction) then
      showButtonIfExists(deck_buttons_guids.enable[deck_name])
      showButtonIfExists(deck_buttons_guids.disable[deck_name])
      deck_button_visible[deck_name] = true
    elseif deck_button_visible[deck_name] and not (checkDependency(interaction) and checkIncompatibility(interaction)) then
      hideObjectIfExists(deck_buttons_guids.enable[deck_name])
      hideObjectIfExists(deck_buttons_guids.disable[deck_name])
      deck_button_visible[deck_name] = false
      if deck_enabled[deck_name] then
        setDeckEnabled { deck_name = deck_name, is_enabled = false }
      end
    end
  end
end

function checkIncompatibility(interaction)
  for other_deck, is_enabled in pairs(deck_enabled) do
    if other_deck == interaction.incompatibility and is_enabled then
      return false
    end
  end
  return true
end

function checkDependency(interaction)
  for other_deck, is_enabled in pairs(deck_enabled) do
    if other_deck == interaction.dependency and not is_enabled then
      return false
    end
  end
  return true
end

function hideDeck(deck_name)
  for _, guid in pairs(Guids.deck_objects[deck_name]) do
    hideObjectIfExists(guid)
  end
end

function showDeck(deck_name)
  for _, guid in pairs(Guids.deck_objects[deck_name]) do
    showObjectIfExists(guid)
  end
end

function showButtonIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object == nil then
    return
  end
  object.setPosition({ object.getPosition().x, 1.06, object.getPosition().z })
  if object.getButtons() then
    for _, button in pairs(object.getButtons()) do
      object.editButton({ index = button.index, scale = { 1, 1, 1 } })
    end
  end
end

function showObjectIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object == nil then
    return
  end

  object.unlock()
  local target_y = 0.95 + object.getBounds().size.y / 2 + object.getBounds().offset.y
  object.setPositionSmooth({ object.getPosition().x, target_y, object.getPosition().z }, false, true)
end

function hideObjectIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object == nil then
    return
  end

  object.lock()
  local target_y = 0 - object.getBounds().size.y / 2 + object.getBounds().offset.y
  object.setPositionSmooth({ object.getPosition().x, target_y, object.getPosition().z }, false, true)
end

function updateDeckVisible()
  for deck_name, should_be_visible in pairs(deck_enabled) do
    if should_be_visible and not deck_visible[deck_name] then
      deck_visible[deck_name] = true
      showDeck(deck_name)
    elseif not should_be_visible and deck_visible[deck_name] then
      deck_visible[deck_name] = false
      hideDeck(deck_name)
    end
  end
end

function updateButtonsState()
  for deck_name, visible in pairs(deck_button_visible) do
    if visible and deck_enabled[deck_name] then
      local button_enable = getObjectFromGUID(deck_buttons_guids.enable[deck_name])
      if button_enable ~= nil and button_enable.getStateId() == 1 then
        button_enable.setState(2)
      end
    elseif visible and not deck_enabled[deck_name] then
      local button_disable = getObjectFromGUID(deck_buttons_guids.disable[deck_name])
      if button_disable ~= nil and button_disable.getStateId() == 2 then
        button_disable.setState(1)
      end
    end
  end
end
