require("util/table")
require("constants/guids")

local tile_check_zones = {
  "8fd451", "7e8397", "d0b593", "f25b1c", "234056", "e05d05", "094ef7", "568e1c"
}

local start_button_guid = "af7bb2"

local kings_bag_guid = "11eb0a"
local kings_bag = {}
local game_table_guid = "0f8757"
local game_table = {}
local castle_manager_guid = "9bb39a"
local castle_manager = {}

local quests_deck_guid = "fd8a62"
local game_objects_guid = {
  kingdomino = {
    deck = "b972db"
  },
  queendomino = {
    deck = "b12f86",
    buildings = "04de04",
    building_board = "a066dc",
    right_building_board = "a77d62",
    coin1_bag = "38e164",
    coin3_bag = "8468e9",
    coin9_bag = "4638c0",
    knight_bag = "fe4062",
    tower_bag = "45152b",
    queen = "401270",
    dragon = "447c40"
  },
  age_of_giants = {
    deck = "d36a20",
    giants_bag = "da9688"
  },
  the_court = {
    buildings = "e0b7ee",
    building_board = "d19b4c",
    wheat_bag = "68a4e4",
    sheep_bag = "98f12a",
    wood_bag = "443d34",
    fish_bag = "3725a9"
  }
}
local deck_size_modifiers = {
  two_players_basic = 0.5,
  three_players_classic = 0.25
}
local castle_tile_y = 0.95
local castle_y = 1.16

local decks_positions = {
  main_deck = {
    { { 0.00, 1.24, -24.00 } },
    { { -3.00, 1.24, -24.00 }, { 3.00, 1.24, -24.00 } }
  },
  main_deck_5p = {
    { { 0.00, 1.24, -32.00 } },
    { { -3.00, 1.24, -32.00 }, { 3.00, 1.24, -32.00 } }
  }
}

local next_turn_position = { 0.00, 1.05, -13.00 }
local next_turn_position_5p = { 0.00, 1.05, -21.00 }

local next_turn_position = {
  [3] = { -0.03, 1.05, -4.00 },
  [4] = { -0.03, 1.05, -6.00 },
  [5] = { -0.03, 1.05, -8.00 },
  [8] = { -0.03, 1.05, -15.00 },
}

local quests_positions = {
  { -3.00, 1.03, -21.00 },
  { 3.00, 1.03, -21.00 }
}
local quests_positions_5p = {
  { -3.00, 1.03, -29.00 },
  { 3.00, 1.03, -29.00 }
}

local default_quests_guid = { "7f87c8", "ddd8f4" }

local game_settings = {}

local next_turn_button_guid = "4a6126"

local player_positions = {
  start = {
    White = { -21.01, 0.95, -17.00 },
    Orange = { 20.95, 0.95, -17.00 },
    Purple = { -21.01, 0.95, 23.00 },
    Red = { 20.95, 0.95, 23.00 },
    Green = { -31.00, 0.95, 3.00 },
    Pink = { 30.94, 0.95, 3.00 }
  },
  [5] = {
    White = {
      tight = { -17.01, 0.95, -7.00 },
      spaced = { -17.01, 0.95, -13.00 }
    },
    Orange = {
      tight = { 16.95, 0.95, -7.00 },
      spaced = { 16.95, 0.95, -13.00 },
    },
    Purple = {
      tight = { -17.01, 0.95, 13.00 },
      spaced = { -17.01, 0.95, 19.00 }
    },
    Red = {
      tight = { 16.95, 0.95, 13.00 },
      spaced = { 16.95, 0.95, 19.00 }
    },
    Green = {
      tight = { -21.01, 0.95, 3.00 },
      spaced = { -21.01, 0.95, 3.00 }
    },
    Pink = {
      tight = { 20.95, 0.95, 3.00 },
      spaced = { 20.95, 0.95, 3.00 }
    }
  },
  [7] = {
    White = {
      tight = { -19.01, 0.95, -11.00 },
      spaced = { -19.01, 0.95, -15.00 }
    },
    Orange = {
      tight = { 18.95, 0.95, -11.00 },
      spaced = { 18.95, 0.95, -15.00 },
    },
    Purple = {
      tight = { -19.01, 0.95, 17.00 },
      spaced = { -19.01, 0.95, 21.00 }
    },
    Red = {
      tight = { 18.95, 0.95, 17.00 },
      spaced = { 18.95, 0.95, 21.00 }
    },
    Green = {
      tight = { -23.01, 0.95, 3.00 },
      spaced = { -23.01, 0.95, 3.00 }
    },
    Pink = {
      tight = { 22.95, 0.95, 3.00 },
      spaced = { 22.95, 0.95, 3.00 }
    }
  }
}
local overlapping_players = {
  White = "Green",
  Orange = "Pink",
  Purple = "Green",
  Red = "Pink"
}

function onLoad()
  game_table = getObjectFromGUID(game_table_guid)
  kings_bag = getObjectFromGUID(kings_bag_guid)
  castle_manager = getObjectFromGUID(castle_manager_guid)
end

function destroyObjectsIfExists(guids)
  for _, guid in pairs(guids) do
    destroyObjectIfExists(guid)
  end
end

function destroyObjectIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object then
    object.destroy()
  end
end

function launchGame(new_game_settings)
  game_settings = new_game_settings
  kings_bag.call("placeKings", game_settings)

  if game_settings.variants.random_quests then
    dealRandomQuests()
  else
    dealDefaultQuests()
  end

  local decks = prepareMainDecks()
  local buildings = prepareBuildings()

  removeCheckZones()
  destroyUnusedPieces()
  game_table.call("prepareTableForGame")
  Wait.frames(moveKingdoms, 5)
  if game_settings.decks.queendomino then
    Wait.frames(function()
      for color, seated in pairs(game_settings.seated_players) do
        if seated then
          takeCoins(color)
        end
      end
    end, 10)
  end

  Wait.frames(function()
    firstTurn(decks, buildings)
  end, 20)

  getObjectFromGUID(start_button_guid).destroy()
end

function removeCheckZones()
  for i = #tile_check_zones, game_settings.tile_deal_count + 1, -1 do
    getObjectFromGUID(tile_check_zones[i]).destroy()
  end
end

function firstTurn(decks, building_guids)
  local next_turn_button = getObjectFromGUID(next_turn_button_guid)
  setNextTurnPosition(next_turn_button)

  -- Cloned decks get their GUID after about 1 or 2 frames...
  local deck_guids = {}
  for _, deck in pairs(decks) do
    table.insert(deck_guids, deck.getGUID())
  end

  local new_game = {
    decks = deck_guids,
    buildings = building_guids,
    settings = game_settings,
    castles = getCastles()
  }
  Global.setTable("game", new_game)
  next_turn_button.call("firstTurn", new_game)
end

function getCastles()
  local castles = {}
  for color, playing in pairs(game_settings.seated_players) do
    if playing then
      castles[color] = player_pieces[color].castle
    end
  end
  return castles
end

function setNextTurnPosition(button)
  local position = next_turn_position[game_settings.tile_deal_count]

  button.setPosition({ position[1], -2.5, position[3] })
  Wait.frames(function()
    button.setPositionSmooth(position)
  end, 30)
  button.setRotation({ 0, 180, 0 })
end

function dealDefaultQuests()
  dealQuests(default_quests_guid)
end

function dealRandomQuests()
  dealQuests({ nil, nil })
end

function dealQuests(quest_guids)
  local quest_deck = getObjectFromGUID(quests_deck_guid)
  quest_deck.shuffle()

  local actual_quests_positions = quests_positions
  if game_settings.player_count > 4 then
    actual_quests_positions = quests_positions_5p
  end

  for i = 1, 2, 1 do
    quest_deck.takeObject({
      guid = quest_guids[i],
      position = actual_quests_positions[i],
      callback_function = function(obj)
        obj.lock()
      end })
  end
  quest_deck.destroy()
end

function takeCoins(playerColor)
  local handPosition = getObjectFromGUID(player_pieces[playerColor].hand_zone).getPosition()
  local coin1Bag = getObjectFromGUID(game_objects_guid.queendomino.coin1_bag)
  local coin3Bag = getObjectFromGUID(game_objects_guid.queendomino.coin3_bag)
  local knightBag = getObjectFromGUID(game_objects_guid.queendomino.knight_bag)
  if playerColor == "Green" or playerColor == "Pink" then
    coin1Bag.takeObject({ smooth = false, position = { handPosition.x, handPosition.y, handPosition.z + 2 } })
    coin3Bag.takeObject({ smooth = false, position = { handPosition.x, handPosition.y, handPosition.z + 1 } })
    coin3Bag.takeObject({ smooth = false, position = { handPosition.x, handPosition.y, handPosition.z } })
    knightBag.takeObject({ smooth = false, position = { handPosition.x, handPosition.y, handPosition.z - 2 } })
  else
    coin1Bag.takeObject({ smooth = false, position = { handPosition.x + 2, handPosition.y, handPosition.z } })
    coin3Bag.takeObject({ smooth = false, position = { handPosition.x + 1, handPosition.y, handPosition.z } })
    coin3Bag.takeObject({ smooth = false, position = { handPosition.x, handPosition.y, handPosition.z } })
    knightBag.takeObject({ smooth = false, position = { handPosition.x - 2, handPosition.y, handPosition.z } })
  end
end

function destroyUnusedPieces()
  for mode, enabled in pairs(game_settings.decks) do
    if not enabled then
      for _, guid in pairs(game_objects_guid[mode]) do
        destroyObjectIfExists(guid)
      end
    end
  end
end

function setupRoyalWedding(decksPositions)
  setupKingdomino(decksPositions[1])
  setupQueendomino(decksPositions[2])
  Global.setTable("decks", {
    getObjectFromGUID(game_objects_guid.kingdomino.deck),
    getObjectFromGUID(game_objects_guid.queendomino.deck)
  })
end

function prepareMainDecks()
  local decks = getMainDecks()
  shuffleDecks(decks)
  resizeDecks(decks)
  local positions = getMainDecksPosition(decks)
  readyDecks(decks, positions)

  return table.collectValues(decks)
end

function getBuildingsManagers()
  local building_managers = {}
  for mode, enabled in pairs(game_settings.decks) do
    if enabled and game_objects_guid[mode].building_board then
      building_managers[mode] = game_objects_guid[mode].building_board
    end
  end
  return building_managers
end

function prepareBuildings()
  local building_managers = getBuildingsManagers()

  for _, manager in pairs(building_managers) do
    getObjectFromGUID(manager).call("placeDeck")
  end

  return building_managers
end

function shuffleDecks(decks)
  for _, deck in pairs(decks) do
    deck.shuffle()
  end
end

function readyDecks(decks, positions)
  for name, deck in pairs(decks) do
    deck.setPositionSmooth(positions[name])
    deck.shuffle()
  end
end

function getMainDecks()
  local decks = {}
  for mode, enabled in pairs(game_settings.decks) do
    if enabled and game_objects_guid[mode].deck then
      decks[mode] = getObjectFromGUID(game_objects_guid[mode].deck)
    end
  end

  if game_settings.decks.age_of_giants then
    decks.kingdomino.call("mergeDeck", decks.age_of_giants)
    decks.age_of_giants = nil
  end
  if game_settings.variants.kingdomino_xl then
    local position = decks.kingdomino.getPosition()
    position.y = -2.5
    decks.kingdomino_xl = decks.kingdomino.clone({ position = position })
  end

  return decks
end

function getMainDecksPosition(decks)
  local decks_target_position = {}
  local size = table.size(decks)
  local i = 1

  local actual_decks_positions = decks_positions.main_deck
  if game_settings.player_count > 4 then
    actual_decks_positions = decks_positions.main_deck_5p
  end

  for mode, _ in pairs(decks) do
    if game_settings.player_count < 5 then
      decks_target_position[mode] = actual_decks_positions[size][i]
    else
      decks_target_position[mode] = actual_decks_positions[size][i]
    end
    i = i + 1
  end
  return decks_target_position
end

function resizeDecks(decks)
  if game_settings.decks.kingdomino and not game_settings.decks.queendomino then
    if game_settings.player_count == 2 and not game_settings.variants.two_players_advanced then
      cutDeck(decks.kingdomino, deck_size_modifiers.two_players_basic)
    end
    if game_settings.player_count == 3 and not game_settings.variants.three_players_variant then
      cutDeck(decks.kingdomino, deck_size_modifiers.three_players_classic)
      if decks.kingdomino_xl and decks.kingdomino_xl ~= nil then
        Wait.condition(function()
          cutDeck(decks.kingdomino_xl, deck_size_modifiers.three_players_classic)
        end, function()
          return decks.kingdomino.guid ~= decks.kingdomino_xl.guid
        end)
      end
    end
  end
end

function cutDeck(deck, size_modifier)
  deck.cut(#deck.getObjects() * size_modifier)[2].destroy()
end

function movePlayerPieces(color, target_position)
  local castle_tile = getObjectFromGUID(player_pieces[color].castle_tile)
  local kingdom_zone = getObjectFromGUID(player_pieces[color].kingdom_zone)
  local hand_zone = getObjectFromGUID(player_pieces[color].hand_zone)
  local flag = getObjectFromGUID(player_pieces[color].flag)

  hand_zone.setPosition({
    hand_zone.getPosition().x - kingdom_zone.getPosition().x + target_position[1],
    hand_zone.getPosition().y,
    hand_zone.getPosition().z - kingdom_zone.getPosition().z + target_position[3],
  })
  kingdom_zone.setPosition(target_position)
  castle_manager.call("moveCastle", {
    seat_color = color,
    position = {
      target_position[1],
      castle_y,
      target_position[3]
    }
  })
  flag.setPosition({
    target_position[1],
    flag.getPosition().y,
    target_position[3]
  })
  castle_tile.setPositionSmooth({
    target_position[1],
    castle_tile_y,
    target_position[3]
  })
end

function shouldSpaceOutPlayer(color)
  return overlapping_players[color] ~= nil and game_settings.seated_players[overlapping_players[color]]
end

function moveKingdoms()
  local kingdom_size = Global.getVar("kingdom_size")

  for color, seated in pairs(game_settings.seated_players) do
    if seated then
      local target_position = player_positions[kingdom_size][color].tight
      if shouldSpaceOutPlayer(color) then
        target_position = player_positions[kingdom_size][color].spaced
      end
      movePlayerPieces(color, target_position)
    end
  end
end
