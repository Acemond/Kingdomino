require("util/table")
require("constants/guids")
require("constants/players")

local start_button_guid = "af7bb2"

local kings_bag_guid = "11eb0a"
local kings_bag = {}
local game_table_guid = "0f8757"
local game_table = {}
local castle_manager_guid = "9bb39a"
local castle_manager = {}

local deck_priority = {
  [Guids.deck_objects.queendomino.deck] = 1,
  [Guids.deck_objects.kingdomino.deck] = 2,
  [Guids.deck_objects.kingdomino_clone.deck] = 3
}

local quests_deck_guid = "fd8a62"

local deck_size_modifiers = {
  two_players_basic = 0.5,
  three_players_classic = 0.25
}
local castle_tile_y = 0.95
local castle_y = 1.16

local decks_positions = {
  [3] = {
    { { 0.00, 1.24, -17.00 } },
    { { -3.00, 1.24, -17.00 }, { 3.00, 1.24, -17.00 } }
  },
  [4] = {
    { { 0.00, 1.24, -19.00 } },
    { { -3.00, 1.24, -19.00 }, { 3.00, 1.24, -19.00 } }
  },
  [5] = {
    { { 0.00, 1.24, -21.00 } },
    { { -3.00, 1.24, -21.00 }, { 3.00, 1.24, -21.00 } }
  },
  [8] = {
    { { 0.00, 1.24, -27.00 } },
    { { -3.00, 1.24, -27.00 }, { 3.00, 1.24, -27.00 } }
  },
  [10] = {
    { { 0.00, 1.24, -31.00 } },
    { { -3.00, 1.24, -31.00 }, { 3.00, 1.24, -31.00 } }
  }
}

local quests_positions = {
  [3] = {
    { -3.00, 0.96, -14.00 },
    { 3.00, 0.96, -14.00 }
  },
  [4] = {
    { -3.00, 0.96, -16.00 },
    { 3.00, 0.96, -16.00 }
  },
  [5] = {
    { -3.00, 0.96, -18.00 },
    { 3.00, 0.96, -18.00 }
  },
  [8] = {
    { -3.00, 0.96, -24.00 },
    { 3.00, 0.96, -24.00 }
  },
  [10] = {
    { -3.00, 0.96, -28.00 },
    { 3.00, 0.96, -28.00 }
  },
}

local next_turn_position = {
  [3] = { -0.03, 1.05, -4.00 },
  [4] = { -0.03, 1.05, -6.00 },
  [5] = { -0.03, 1.05, -8.00 },
  [8] = { -0.03, 1.05, -15.00 },
  [10] = { -0.03, 1.05, -19.00 }
}

local default_quests_guid = { "7f87c8", "ddd8f4" }

local game_settings = {}

local next_turn_button_guid = "4a6126"

local player_positions = {
  start = {
    White = { -21.01, 0.95, -17.00 },
    Orange = { 20.95, 0.95, -17.00 },
    Purple = { -21.01, 0.95, 23.00 },
    Red = { 20.95, 0.95, 23.00 },
    Green = { -31.00, 0.95, 3.00 },
    Pink = { 30.94, 0.95, 3.00 }
  },
  [5] = {
    White = {
      tight = { -17.01, 0.95, -7.00 },
      spaced = { -17.01, 0.95, -13.00 }
    },
    Orange = {
      tight = { 16.95, 0.95, -7.00 },
      spaced = { 16.95, 0.95, -13.00 },
    },
    Purple = {
      tight = { -17.01, 0.95, 13.00 },
      spaced = { -17.01, 0.95, 19.00 }
    },
    Red = {
      tight = { 16.95, 0.95, 13.00 },
      spaced = { 16.95, 0.95, 19.00 }
    },
    Green = {
      tight = { -21.01, 0.95, 3.00 },
      spaced = { -21.01, 0.95, 3.00 }
    },
    Pink = {
      tight = { 20.95, 0.95, 3.00 },
      spaced = { 20.95, 0.95, 3.00 }
    }
  },
  [7] = {
    White = {
      tight = { -19.01, 0.95, -11.00 },
      spaced = { -19.01, 0.95, -15.00 }
    },
    Orange = {
      tight = { 18.95, 0.95, -11.00 },
      spaced = { 18.95, 0.95, -15.00 },
    },
    Purple = {
      tight = { -19.01, 0.95, 17.00 },
      spaced = { -19.01, 0.95, 21.00 }
    },
    Red = {
      tight = { 18.95, 0.95, 17.00 },
      spaced = { 18.95, 0.95, 21.00 }
    },
    Green = {
      tight = { -23.01, 0.95, 3.00 },
      spaced = { -23.01, 0.95, 3.00 }
    },
    Pink = {
      tight = { 22.95, 0.95, 3.00 },
      spaced = { 22.95, 0.95, 3.00 }
    }
  }
}
local overlapping_players = {
  White = "Green",
  Orange = "Pink",
  Purple = "Green",
  Red = "Pink"
}

function onLoad()
  game_table = getObjectFromGUID(game_table_guid)
  kings_bag = getObjectFromGUID(kings_bag_guid)
  castle_manager = getObjectFromGUID(castle_manager_guid)
end

function destroyObjectsIfExists(guids)
  for _, guid in pairs(guids) do
    destroyObjectIfExists(guid)
  end
end

function destroyObjectIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object then
    object.destroy()
  end
end

function launchGame(new_game_settings)
  game_settings = new_game_settings
  kings_bag.call("placeKings", game_settings)

  local quests
  if game_settings.variants.random_quests then
    quests = dealRandomQuests()
  else
    quests = dealDefaultQuests()
  end

  local decks = prepareMainDecks()
  local buildings = prepareBuildings()

  removeCheckZones()
  destroyUnusedPieces()
  destroyUnusedWalls()
  game_table.call("prepareTableForGame")
  Wait.frames(moveKingdoms, 15)

  Wait.frames(function()
    firstTurn(decks, buildings, quests)
  end, 60)

  getObjectFromGUID(start_button_guid).destroy()
end

function removeCheckZones()
  for i = #Guids.tile_check_zone, game_settings.tile_deal_count + 1, -1 do
    getObjectFromGUID(Guids.tile_check_zone[i]).destroy()
  end
end

function firstTurn(decks, building_guids, quests)
  local next_turn_button = getObjectFromGUID(next_turn_button_guid)
  setNextTurnPosition(next_turn_button)

  -- Cloned decks get their GUID after about 1 or 2 frames...
  local deck_guids = {}
  for _, deck in pairs(decks) do
    table.insert(deck_guids, deck.getGUID())
  end

  local new_game = {
    decks = deck_guids,
    buildings = building_guids,
    settings = game_settings,
    castles = getCastles(),
    quests = quests
  }
  Global.setTable("game", new_game)
  enableKingdomMoveButtons()
  next_turn_button.call("firstTurn", new_game)
end

function enableKingdomMoveButtons()
  for color, playing in pairs(game_settings.seated_players) do
    if playing then
      getObjectFromGUID(Guids.player_pieces[color].castle_tile).call("activateMoveButtons")
    end
  end
end

function getCastles()
  local castles = {}
  for color, playing in pairs(game_settings.seated_players) do
    if playing then
      castles[color] = Guids.player_pieces[color].castle
    end
  end
  return castles
end

function setNextTurnPosition(button)
  local position = next_turn_position[game_settings.tile_deal_count]

  button.setPosition({ position[1], -2.5, position[3] })
  Wait.frames(function()
    button.setPositionSmooth(position)
  end, 30)
  button.setRotation({ 0, 180, 0 })
end

function dealDefaultQuests()
  return dealQuests(default_quests_guid)
end

function dealRandomQuests()
  return dealQuests({ nil, nil })
end

function dealQuests(quest_guids)
  local quest_deck = getObjectFromGUID(quests_deck_guid)
  quest_deck.shuffle()

  local quests = {}
  for i = 1, 2, 1 do
    quests[i] = quest_deck.takeObject({
      guid = quest_guids[i],
      position = quests_positions[game_settings.tile_deal_count][i],
      callback_function = function(obj)
        obj.lock()
      end }).guid
  end
  quest_deck.destroy()
  return quests
end

function takeCoins(color)
  local coin1Bag = getObjectFromGUID(Guids.deck_objects.queendomino.coin1_bag)
  local coin3Bag = getObjectFromGUID(Guids.deck_objects.queendomino.coin3_bag)
  local knightBag = getObjectFromGUID(Guids.deck_objects.queendomino.knight_bag)

  if game_settings.seated_players[color] then
    coin1Bag.deal(1, color)
    coin3Bag.deal(2, color)
    knightBag.deal(1, color)
  end
end

function destroyUnusedPieces()
  for mode, enabled in pairs(game_settings.decks) do
    if not enabled then
      for _, guid in pairs(Guids.deck_objects[mode]) do
        destroyObjectIfExists(guid)
      end
    end
  end
  for color, objects in pairs(Guids.player_pieces) do
    if not game_settings.seated_players[color] then
      destroyObjectIfExists(objects.kingdom_zone)
      destroyObjectIfExists(objects.flag)
      destroyObjectIfExists(objects.lock_kingdom)
      destroyObjectIfExists(objects.unlock_kingdom)
      destroyObjectIfExists(objects.score)
      destroyObjectIfExists(objects.left)
      destroyObjectIfExists(objects.right)
      destroyObjectIfExists(objects.up)
      destroyObjectIfExists(objects.down)
    end
  end
end

function destroyUnusedWalls()
  local kingdom_size = Global.get("kingdom_size")
  for size, walls in pairs(Guids.walls_guids) do
    for color, wall in pairs(walls) do
      if not game_settings.seated_players[color] then
        destroyObjectIfExists(wall)
      end
    end
    if size ~= kingdom_size then
      destroyObjectsIfExists(walls)
    end
  end
end

function setupRoyalWedding(decksPositions)
  setupKingdomino(decksPositions[1])
  setupQueendomino(decksPositions[2])
  Global.setTable("decks", {
    getObjectFromGUID(Guids.deck_objects.kingdomino.deck),
    getObjectFromGUID(Guids.deck_objects.queendomino.deck)
  })
end

function prepareMainDecks()
  local decks = getMainDecks()
  shuffleDecks(decks)
  resizeDecks(decks)
  local positions = getMainDecksPosition(decks)
  readyDecks(decks, positions)

  local sorted_decks = table.collectValues(decks)
  table.sort(sorted_decks, function (deck_1, deck_2)
    return deck_priority[deck_1.guid] < deck_priority[deck_2.guid]
  end)
  return sorted_decks
end

function getBuildingsManagers()
  local building_managers = {}
  for mode, enabled in pairs(game_settings.decks) do
    if enabled and Guids.deck_objects[mode].building_board then
      building_managers[mode] = Guids.deck_objects[mode].building_board
    end
  end
  return building_managers
end

function prepareBuildings()
  local building_managers = getBuildingsManagers()

  for _, manager in pairs(building_managers) do
    getObjectFromGUID(manager).call("placeDeck")
  end

  return building_managers
end

function shuffleDecks(decks)
  for _, deck in pairs(decks) do
    deck.shuffle()
  end
end

function readyDecks(decks, positions)
  for name, deck in pairs(decks) do
    deck.setPositionSmooth(positions[name])
    deck.shuffle()
  end
end

function getMainDecks()
  local decks = {}
  for mode, enabled in pairs(game_settings.decks) do
    if enabled and Guids.deck_objects[mode].deck then
      decks[mode] = getObjectFromGUID(Guids.deck_objects[mode].deck)
    end
  end

  local kingdomino_xl_deck = getObjectFromGUID(Guids.deck_objects.kingdomino_clone.deck)
  local age_of_giants_xl_deck = getObjectFromGUID(Guids.deck_objects.age_of_giants_clone.deck)
  if game_settings.decks.age_of_giants then
    decks.kingdomino.call("mergeDeck", decks.age_of_giants)
    decks.age_of_giants = nil

    kingdomino_xl_deck.unlock()
    age_of_giants_xl_deck.unlock()
    kingdomino_xl_deck.call("mergeDeck", age_of_giants_xl_deck)
  end
  if game_settings.variants.kingdomino_xl then
    decks.kingdomino_xl = kingdomino_xl_deck
    kingdomino_xl_deck.setPosition(decks.kingdomino.getPosition())
  end

  return decks
end

function getMainDecksPosition(decks)
  local decks_target_position = {}
  local size = table.size(decks)
  local i = 1

  for mode, _ in pairs(decks) do
    if game_settings.player_count < 5 then
      decks_target_position[mode] = decks_positions[game_settings.tile_deal_count][size][i]
    else
      decks_target_position[mode] = decks_positions[game_settings.tile_deal_count][size][i]
    end
    i = i + 1
  end
  return decks_target_position
end

function resizeDecks(decks)
  if game_settings.decks.kingdomino and not game_settings.decks.queendomino then
    if game_settings.player_count == 2 and not game_settings.variants.two_players_advanced then
      cutDeck(decks.kingdomino, deck_size_modifiers.two_players_basic)
    end
    if game_settings.player_count == 3 and not game_settings.variants.three_players_variant then
      cutDeck(decks.kingdomino, deck_size_modifiers.three_players_classic)
      if decks.kingdomino_xl and decks.kingdomino_xl ~= nil then
        Wait.condition(function()
          cutDeck(decks.kingdomino_xl, deck_size_modifiers.three_players_classic)
        end, function()
          return decks.kingdomino.guid ~= decks.kingdomino_xl.guid
        end)
      end
    end
  end
end

function cutDeck(deck, size_modifier)
  deck.cut(#deck.getObjects() * size_modifier)[2].destroy()
end

function movePlayerPieces(color, target_position)
  local castle_tile = getObjectFromGUID(Guids.player_pieces[color].castle_tile)
  local kingdom_zone = getObjectFromGUID(Guids.player_pieces[color].kingdom_zone)
  local flag = getObjectFromGUID(Guids.player_pieces[color].flag)

  kingdom_zone.setPosition({
    target_position[1],
    kingdom_zone.getPosition().y,
    target_position[3]
  })

  local hand_offset = (Global.get("kingdom_size") + 5) / kingdom_zone.getScale().x
  local hand_transform = Player[color].getHandTransform()
  hand_transform.position.x = kingdom_zone.positionToWorld({ 0, 0, -hand_offset }).x
  hand_transform.position.z = kingdom_zone.positionToWorld({ 0, 0, -hand_offset }).z
  Wait.condition(function()
    Player[color].setHandTransform(hand_transform)
    if game_settings.decks.queendomino then
      takeCoins(color)
    end
  end, function()
    return math.abs(castle_tile.getPosition().x - target_position[1]) < 0.1
  end)

  castle_manager.call("moveCastle", {
    seat_color = color,
    position = {
      target_position[1],
      castle_y,
      target_position[3]
    }
  })
  flag.setPosition({
    target_position[1],
    flag.getPosition().y,
    target_position[3]
  })
  castle_tile.setPositionSmooth({
    target_position[1],
    castle_tile_y,
    target_position[3]
  })
end

function shouldSpaceOutPlayer(color)
  return overlapping_players[color] ~= nil and game_settings.seated_players[overlapping_players[color]]
end

function moveKingdoms()
  local kingdom_size = Global.getVar("kingdom_size")

  for color, seated in pairs(game_settings.seated_players) do
    if seated then
      local target_position = player_positions[kingdom_size][color].tight
      if shouldSpaceOutPlayer(color) then
        target_position = player_positions[kingdom_size][color].spaced
      end
      movePlayerPieces(color, target_position)
    end
  end
end
