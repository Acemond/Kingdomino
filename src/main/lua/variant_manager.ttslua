require("util/table")

local variant_visible = {
  two_players_advanced = true,
  three_players_variant = true,
  random_quests = true,
  kingdomino_xl = true,
}
local variant_defaults = {
  two_players_advanced = false,
  three_players_variant = true,
  random_quests = false,
  kingdomino_xl = false,
}
local variant_enabled = {
  two_players_advanced = variant_defaults.two_players_advanced,
  three_players_variant = variant_defaults.three_players_variant,
  random_quests = variant_defaults.random_quests,
  kingdomino_xl = variant_defaults.kingdomino_xl,
}

local variant_buttons_guids = {
  enable = {
    two_players_advanced = "823bca",
    three_players_variant = "f8c7d6",
    randomn_quests = "75dcb1",
    kingdomino_xl = "42f5a4",
  },
  disable = {
    two_players_advanced = "02322f",
    three_players_variant = "02c336",
    randomn_quests = "edb838",
    kingdomino_xl = "92f52d",
  }
}

local variant_interaction = {
  kingdomino_xl = { dependency = "kingdomino", incompatibilities = { "queendomino" } },
  three_players_variant = { dependency = "kingdomino", incompatibilities = { "queendomino", "age_of_giants" } },
  two_players_advanced = { dependency = "kingdomino", incompatibilities = { "queendomino" } }
}

local deck_manager_guid = "180cbc"
local deck_manager = {}

function onUpdate()
  checkInteractions()
  updateButtonsState()
end

function onLoad(save_state)
  deck_manager = getObjectFromGUID(deck_manager_guid)
  if save_state ~= "" then
    loadSaveState(save_state)
  end
  Global.setTable("variant_enabled", variant_enabled)
end

function loadSaveState(save_state)
  variant_visible = JSON.decode(save_state).variant_visible
  variant_enabled = JSON.decode(save_state).variant_enabled
end

function onSave()
  return JSON.encode({
    variant_visible = variant_visible,
    variant_enabled = variant_enabled
  })
end

function setVariantEnabled(parameters)
  variant_enabled[parameters.variant_name] = parameters.is_enabled
  Global.setTable("variant_enabled", variant_enabled)
end

function checkInteractions()
  for variant_name, interaction in pairs(variant_interaction) do
    if not variant_visible[variant_name] and checkDependency(interaction) and checkIncompatibility(interaction) then
      showButtonIfExists(variant_buttons_guids.enable[variant_name])
      showButtonIfExists(variant_buttons_guids.disable[variant_name])
      variant_visible[variant_name] = true
      setVariantEnabled { variant_name = variant_name, is_enabled = variant_defaults[variant_name] }
    elseif variant_visible[variant_name] and not (checkDependency(interaction) and checkIncompatibility(interaction)) then
      hideButtonIfExists(variant_buttons_guids.enable[variant_name])
      hideButtonIfExists(variant_buttons_guids.disable[variant_name])
      variant_visible[variant_name] = false
      setVariantEnabled { variant_name = variant_name, is_enabled = variant_defaults[variant_name] }  -- FIXME: Quickfix
    end
  end
end

function checkIncompatibility(interaction)
  local deck_enabled = Global.getTable("deck_enabled")
  for deck, is_enabled in pairs(deck_enabled) do
    if table.contains(interaction.incompatibilities, deck) and is_enabled then
      return false
    end
  end
  return true
end

function checkDependency(interaction)
  local deck_enabled = Global.getTable("deck_enabled")
  for deck, is_enabled in pairs(deck_enabled) do
    if deck == interaction.dependency and not is_enabled then
      return false
    end
  end
  return true
end

function showButtonIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object == nil then
    return
  end

  local target_y = 0.95 + object.getBounds().size.y / 2 + object.getBounds().offset.y
  object.setPositionSmooth({ object.getPosition().x, target_y, object.getPosition().z }, false, true)
  object.editButton({ index = 0, scale = { 1, 1, 1 } })
end

function hideButtonIfExists(guid)
  local object = getObjectFromGUID(guid)
  if object == nil then
    return
  end

  local target_y = 0.94 - object.getBounds().size.y / 2 + object.getBounds().offset.y
  object.setPositionSmooth({ object.getPosition().x, target_y, object.getPosition().z }, false, true)
  object.editButton({ index = 0, scale = { 0, 0, 0 } })
end

function updateButtonsState()
  for variant_name, visible in pairs(variant_visible) do
    if visible and variant_enabled[variant_name] then
      local button_enable = getObjectFromGUID(variant_buttons_guids.enable[variant_name])
      if button_enable ~= nil and button_enable.getStateId() == 1 then
        button_enable.setState(2)
      end
    elseif visible and not variant_enabled[variant_name] then
      local button_disable = getObjectFromGUID(variant_buttons_guids.disable[variant_name])
      if button_disable ~= nil and button_disable.getStateId() == 2 then
        button_disable.setState(1)
      end
    end
  end
end
