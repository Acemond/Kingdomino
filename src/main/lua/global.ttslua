require("util/domino")
require("util/table")
require("constants/guids")

local player_manager_guid = "31971b"
local player_manager = {}
local game_launcher_guid = "bb8090"
local game_launcher = {}
local deck_manager_guid = "180cbc"
local deck_manager = {}
local variant_manager_guid = "2c055b"
local variant_manager = {}
local configuration_validator_guid = "2a0d3f"
local configuration_validator = {}

function onLoad(save_state)
  if save_state == "" then
    displayWelcomeMessage()
  end
  player_manager = getObjectFromGUID(player_manager_guid)
  game_launcher = getObjectFromGUID(game_launcher_guid)
  configuration_validator = getObjectFromGUID(configuration_validator_guid)
  deck_manager = getObjectFromGUID(deck_manager_guid)
  variant_manager = getObjectFromGUID(variant_manager_guid)
end

function onSave()
  return JSON.encode({ new_game = false })
end

function onObjectDrop(_, object)
  if table.contains(Guids.dominoes.kingdomino, object.guid)
      or table.contains(Guids.dominoes.kingdomino, object.guid)
      or table.contains(Guids.dominoes.kingdomino, object.guid) then
    local orientation = DominoUtils.getOrientation(object.getRotation().y)
    if orientation == DominoUtils.orientations.x or orientation == DominoUtils.orientations.x_reverse then
      object.setPosition({
        math.floor(object.getPosition().x / 2 + 0.5) * 2,
        object.getPosition().y,
        (math.floor(object.getPosition().z / 2 + 1) * 2) - 1,
      })
    else
      object.setPosition({
        (math.floor(object.getPosition().x / 2 + 1) * 2) - 1,
        object.getPosition().y,
        math.floor(object.getPosition().z / 2 + 0.5) * 2,
      })
    end
    object.setRotation({
      math.floor((object.getRotation().x + 90) * (1 / 180)) / (1 / 180),
      object.getRotation().y,
      math.floor((object.getRotation().z + 90) * (1 / 180)) / (1 / 180)
    })
    object.setVelocity({ 0, 0, 0 })
    object.setAngularVelocity({ 0, 0, 0 })
  end
end

function displayWelcomeMessage()
  broadcastToAll("Welcome to Kingdomino!", { r = 1, g = 1, b = 1 })
  Wait.frames(function()
    broadcastToAll("Please add players and press Start Game", { r = 1, g = 1, b = 1 })
  end, 60)
end

function quickSetup(target_player_count)
  Global.setVar("quick_setup", true)
  player_manager.call("setPlayerCount", target_player_count)
  resolveForPlayerCount(target_player_count)
  Wait.frames(startGame, 10)
end

function startGame()
  startWithSettings(getGameSettings())
end

function startWithSettings(game_settings)
  if configuration_validator.call("validate", game_settings) then
    game_launcher.call("launchGame", game_settings)
  end
end

function getGameSettings()
  return {
    decks = Global.getTable("deck_enabled"),
    variants = Global.getTable("variant_enabled"),
    player_count = Global.getVar("player_count"),
    seated_players = Global.getTable("seated_players"),
    tile_deal_count = Global.getVar("board_size")
  }
end

function resolveForPlayerCount(target_player_count)
  local game_settings = getGameSettings()
  if target_player_count == 5 then
    variant_manager.call("setVariantEnabled", { variant_name = "kingdomino_xl", is_enabled = false })
    variant_manager.call("setVariantEnabled", { variant_name = "two_players_advanced", is_enabled = false })
  elseif target_player_count == 6 then
    deck_manager.call("setDeckEnabled", { deck_name = "kingdomino", is_enabled = true })
    deck_manager.call("setDeckEnabled", { deck_name = "queendomino", is_enabled = true })
    deck_manager.call("setDeckEnabled", { deck_name = "age_of_giants", is_enabled = false })
    variant_manager.call("setVariantEnabled", { variant_name = "kingdomino_xl", is_enabled = false })
    variant_manager.call("setVariantEnabled", { variant_name = "two_players_advanced", is_enabled = false })
  end
  return game_settings
end
