require("util/domino")
require("util/table")
require("constants/guids")
require("constants/domino_board")
require("decks/territories")
require("snap_points")

local player_manager_guid = "31971b"
local player_manager = {}
local game_launcher_guid = "bb8090"
local game_launcher = {}
local deck_manager_guid = "180cbc"
local deck_manager = {}
local variant_manager_guid = "2c055b"
local variant_manager = {}
local configuration_validator_guid = "2a0d3f"
local configuration_validator = {}

local dealt_resources = {}

function onLoad(save_state)
  if save_state ~= "" then
    dealt_resources = JSON.decode(save_state).dealt_resources
  else
    displayWelcomeMessage()
  end
  player_manager = getObjectFromGUID(player_manager_guid)
  game_launcher = getObjectFromGUID(game_launcher_guid)
  configuration_validator = getObjectFromGUID(configuration_validator_guid)
  deck_manager = getObjectFromGUID(deck_manager_guid)
  variant_manager = getObjectFromGUID(variant_manager_guid)
end

function onUpdate()
  updateHeldDominoesSnapPoint()
  SnapPointsManager.setGlobalSnapPoints()
end

function onSave()
  return JSON.encode({
    new_game = false,
    dealt_resources = dealt_resources
  })
end

function onObjectDrop(_, object)
  if (table.contains(Guids.dominoes.kingdomino, object.guid)
      or table.contains(Guids.dominoes.queendomino, object.guid)
      or table.contains(Guids.dominoes.age_of_giants, object.guid)) then
    if Global.getTable("deck_enabled")
        and Global.getTable("deck_enabled").the_court
        and isDominoInKingdom(object) then
      local add_resources_function = function()
        addTheCourtResources(object)
      end
      Wait.condition(add_resources_function, function()
        return object.getPosition().y < 1.24
      end, 180, add_resources_function)
    end
  end
end

function updateHeldDominoesSnapPoint()
  local held_objects = getPlayersObjects()
  local snap_points = {}
  for _, object in pairs(held_objects) do
    if table.contains(Guids.dominoes.kingdomino, object.guid)
        or table.contains(Guids.dominoes.queendomino, object.guid)
        or table.contains(Guids.dominoes.age_of_giants, object.guid)
        and not nearbySnapPoint(object, 1.2) then
      table.insert(snap_points, { position = getSnapPointPosition(object) })
    end
  end

  Global.call("setHeldObjectsSnapPoint", snap_points)
end

function getSnapPointPosition(domino)
  local orientation = DominoUtils.getOrientation(domino.getRotation().y)
  if orientation == DominoUtils.orientations.x or orientation == DominoUtils.orientations.x_reverse then
    return {
      x = snapToGrid(domino.getPosition().x, 2),
      y = 0.96,
      z = snapToGrid(domino.getPosition().z, 2, 0.5)
    }
  else
    return {
      x = snapToGrid(domino.getPosition().x, 2, 0.5),
      y = 0.96,
      z = snapToGrid(domino.getPosition().z, 2)
    }
  end
end

function snapToGrid(value, grid, offset)
  offset = offset or 0
  return (math.floor(value / grid + 0.5 + offset) - offset) * grid
end

function getPlayersObjects()
  local all_objects = {}
  for _, player in pairs(Player.getPlayers()) do
    if player.getHoldingObjects() ~= nil then
      for _, object in pairs(player.getHoldingObjects()) do
        table.insert(all_objects, object)
      end
    end
  end
  return all_objects
end

function isDominoInKingdom(domino)
  for _, pieces in pairs(Guids.player_pieces) do
    local zone = getObjectFromGUID(pieces.kingdom_zone)

    if table.contains(zone.getObjects(), domino) then
      return true
    end
  end

  return false
end

function popResourceToken(token)
  local target_scale = token.getScale().x
  token.setScale({ 0.05, token.getScale().y, 0.05 })
  token.setPositionSmooth({
    token.getPosition().x,
    1.3,
    token.getPosition().z
  }, false, true)
  scaleToken(token, target_scale)
end

function scaleToken(token, target_scale)
  Wait.frames(function()
    if token.getScale().x < target_scale then
      if token.getScale().x * 1.16 < target_scale then
        token.scale(1.16)
        scaleToken(token, target_scale)
      else
        token.setScale({ target_scale, target_scale, target_scale })
      end
    end
  end, 1)
end

function addTheCourtResources(domino)
  if dealt_resources[domino.guid] then
    return
  end
  dealt_resources[domino.guid] = true

  local squares = getDominoContent(domino)
  if squares[1].crowns == 0 then
    local position = domino.positionToWorld({
      (1 / 1.8), 0, 0
    })
    local resource_type = getResourceType(squares[1].type)
    if resource_type then
      getObjectFromGUID(Guids.deck_objects.the_court[resource_type]).takeObject({
        position = { position.x, 0.6, position.z },
        smooth = false,
        callback_function = popResourceToken
      })
    end
  end
  if squares[2].crowns == 0 then
    local position = domino.positionToWorld({
      -(1 / 1.8), 0, 0
    })
    local resource_type = getResourceType(squares[2].type)
    if resource_type then
      getObjectFromGUID(Guids.deck_objects.the_court[resource_type]).takeObject({
        position = { position.x, 0.6, position.z },
        smooth = false,
        callback_function = popResourceToken
      })
    end
  end
end

function nearbySnapPoint(domino, distance)
  local board = getObjectFromGUID(DominoBoardConstants.left_boards[Global.getVar("board_size")].guid)
  for _, snap_point in pairs(board.getSnapPoints()) do
    local snap_x = snap_point.position.x * board.getScale().x + board.getPosition().x
    local snap_z = snap_point.position.z * board.getScale().z + board.getPosition().z
    if math.abs(snap_x - domino.getPosition().x) <= distance
        and math.abs(snap_z - domino.getPosition().z) <= distance then
      return true
    end
  end
  return false
end

function snapToGrid(value, grid, offset)
  offset = offset or 0
  return (math.floor(value / grid + 0.5 + offset) - offset) * grid
end

function displayWelcomeMessage()
  broadcastToAll("Welcome to Kingdomino!", { r = 1, g = 1, b = 1 })
  Wait.frames(function()
    broadcastToAll("Please add players and press Start Game", { r = 1, g = 1, b = 1 })
  end, 60)
end

function quickSetup(target_player_count)
  Global.setVar("quick_setup", true)
  player_manager.call("setPlayerCount", target_player_count)
  resolveForPlayerCount(target_player_count)
  Wait.frames(startGame, 10)
end

function startGame()
  startWithSettings(getGameSettings())
end

function startWithSettings(game_settings)
  if configuration_validator.call("validate", game_settings) then
    game_launcher.call("launchGame", game_settings)
  end
end

function getGameSettings()
  return {
    decks = Global.getTable("deck_enabled"),
    variants = Global.getTable("variant_enabled"),
    player_count = Global.getVar("player_count"),
    seated_players = Global.getTable("seated_players"),
    tile_deal_count = Global.getVar("board_size")
  }
end

function resolveForPlayerCount(target_player_count)
  local game_settings = getGameSettings()
  if target_player_count > 4 then
    deck_manager.call("setDeckEnabled", { deck_name = "kingdomino", is_enabled = true })
    deck_manager.call("setDeckEnabled", { deck_name = "queendomino", is_enabled = true })
  end
  return game_settings
end
