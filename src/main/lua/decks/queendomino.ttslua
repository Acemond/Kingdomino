require("util/table")
require("util/domino")
require("constants/guids")
require("constants/domino_board")

function dealDomino(domino, position)
  local callback_function = function(obj)
    obj.flip()
    Wait.condition(function()
      obj.lock()
    end, function()
      return obj.getPosition().y < 1.24
    end, 180, function()
      obj.lock()
    end)
  end

  if self == nil or #self.getObjects() == 0 then
    local domino_object = getObjectFromGUID(domino.guid)
    domino_object.setPositionSmooth(position)
    Wait.condition(function()
      callback_function(domino_object)
    end, function()
      return math.abs(position.x - domino_object.getPosition().x) < 0.01
          and math.abs(position.y - domino_object.getPosition().y) < 0.01
          and math.abs(position.z - domino_object.getPosition().z) < 0.01
    end)
  else
    self.takeObject({
      guid = domino.guid,
      position = position,
      rotation = { 0, 180, 180 },
      callback_function = callback_function
    })
  end
end

function dealDominoes()
  self.interactable = false

  local dominoes = getSortedDominoesValue()
  for index, domino in pairs(dominoes) do
    local domino_zone = getObjectFromGUID(Guids.tile_check_zone[index])

    Wait.frames(function()
      dealDomino(domino, domino_zone.getPosition())
    end, index * 10)
  end

  Wait.frames(function()
    self.interactable = true
  end, (#dominoes + 1) * 10)
end

function getSortedDominoesValue()
  local dominoes = { unpack(self.getObjects(), 1, Global.getTable("game").settings.tile_deal_count) }
  table.sort(dominoes, function(a, b)
    return DominoUtils.getDominoValueFromName(a.name) < DominoUtils.getDominoValueFromName(b.name)
  end)
  return dominoes
end
